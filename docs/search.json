[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Microeconometrics: Methods and Applications",
    "section": "",
    "text": "Introduction\nSome info about the context."
  },
  {
    "objectID": "00_01_About.html",
    "href": "00_01_About.html",
    "title": "About this book",
    "section": "",
    "text": "Some info about the book."
  },
  {
    "objectID": "00_02_Download.html",
    "href": "00_02_Download.html",
    "title": "How to download the required data",
    "section": "",
    "text": "In order to download the required data for the excersices in this virtual resource you will find the datasets for free acces in (I guess this will not be the definitive repository, but for the moment I will write mine) this GitHub repository."
  },
  {
    "objectID": "01_00_FollowingR.html",
    "href": "01_00_FollowingR.html",
    "title": "Following Along with R",
    "section": "",
    "text": "In this chapter we show you how to follow the book’s examples with R. What is R? According to the R Project web’s definition “R is a free software environment for statistical computing and graphics”. In general we recommend you to work in an IDE like RStudio, that is a friendly user interface who allows you to have in view your workspace, output like graphics, help documentation, console, etc… This chapter doesn’t intend to be comprehensive introduction to the language, instead is intended to provide you with the very basic tools to understand the development of the book excercises along the different chapters.\nIf you want a widely comprehensive tutorial about R or specific topics like graphs or manipulating data, we recommend you the next free literature:\n- Wickham, H., Cetinkaya-Rundel, M. & Grolemund, G. (2023). R for data science. O’Reilly Media. 2nd Edition. Link\n- Wickham, H. (2016). ggplot2: Elegant Graphics for Data Analysis, Springer-Verlag New York. Link\n- Wilke, C. (2019). Fundamentals of Data Visualization: A Primer on Making Informative and Compelling Figures. O’Reilly Media. 1st Edition. Link\nThe rest of this chapter is organized as follow: First is shown an introduction to the language as a tutorial focused in giving the tools to following along the book’s material and procedures, next there is a series of sections focused on follow the book’s examples and make the applications in R."
  },
  {
    "objectID": "01_01_IntroductionR.html",
    "href": "01_01_IntroductionR.html",
    "title": "Introduction to R and Basic Tools Required for this book",
    "section": "",
    "text": "From the moment you open R you are into an R session until the moment you close it, from now on understand a session as this time between you open and close R. A good idea when working with R is to use R Projects who allows you to organize into a better way your enviroment in a self-contained folder, where all the documents (input or output) by default will be in that folder unless you define subfolders or specify the entire path in your computer to other folders. In order to execute code you should input the code in your R console, that is the place where R receive instructions and execute them, so if you input in your console\n\n4 + 4\n\n[1] 8\n\n\nR will understand the instruction that you want to add 4 plus 4 and show the result, latter in this chapter we will explain more about mathematical operations and the different R data types. Another example of R execution is that if you type in your console:\n\ngetwd()\n\n[1] \"C:/Users/Usuario/Desktop/Prim_2023/Ayudantias/Investigación/Clarke_MicroeconometriaCausalidad/Ejemplo_QuartoBook\"\n\n\nR will show you the path to the current working directory, the folder where R understand is working. If you want to change this directory you must use the function setwd(\"Path/to/the/directory/you/want/to/use\") with the path written between \" \" or ' ' in order to R understand that is a character, again a topic that will be seen deeper latter. Another important thing is that you must type path with / because interprets some backslash \\ followed by certains letters as escape characters that executes some specific order, as \\n when used into certains function:\n\ncat(\"Hello \\nWorld\")\n\nHello \nWorld\n\n\nFunctions is also a topic we are going to see deeper latter. Anyways, until now we have just execute core in the console, but with this unless you watch out for the history, you may loose the code between sessions, so is highly recommended to register your code in R Scripts. What are scripts? Are text files that R understands it like code to execute, all you write in a script R will interpret it as code to execute unless you have the # character to the left. For example if you type in your script\n\nprint(\"Hello World\")\n\n[1] \"Hello World\"\n\n\nR will understan that you are giving the instruction to print the character Hello World, but instead if you type\n\n# print(\"Hello World\")\n\nR will do nothing because interpret all to the right from the # as plain text and not code with instructions to follow. Note that is said “all to the right from the #”, this implies that it can be used in the same line as code\n\nprint(\"Hello World\") # To the left of # code, all to the right, plain text\n\n[1] \"Hello World\"\n\n\nAs you can see it executes the instruction to the left from # but ignores all to the right, this plain text is known as comment and is always a good practice in programming to include a few comments in your script explaining in general terms what are you doing. The previous idea helps you when revise old scripts and when share your code work with others.\n\nAn introduction to language and data types\nUntil now we have executed some code in R, some of this code can made internal changes as the setwd function, some of this code show an specific result as print function and other just execute an action and show result as 4 + 4, but just doing and showing it, not storing this result. In order to store the results of your procedures you can define a variable or an object using one of the next symbols: ->, = or <-. Now is shown an example where is asigned a variable named x with different numbers:\n\nx <- 1\nx\n\n[1] 1\n\nx = 2\nx\n\n[1] 2\n\n3 -> x\n\nWith the use of -> or <- is clearly how R assign the value, but with the use of = you must be cautelous of do it the way name = value, if not, there will be an error:\n\n4 = x\n\nError in 4 = x: lado izquierdo de la asignación inválida (do_set)\n\n\nAll the way long in your sessions you could see this type of messages, this messages points you different types of details:\n- Error: This kind of messages are telling you that something gone wrong and R couldn’t execute the code you type. Usually they include a brief explanation of the error for you to debugging it.\n- Warning: This kind of message are telling you that something that may cause you problems occured. R will still execute the code and give the result, but warning you that not everything is in order and may cause inaccurate results o future problems. Some times this messages are something that you can ignore and get your results correctly but some other times it may cause you problem, so you should give a minute to read it, understand it and evaluate if is necessary to fix it.\n- Message: This kind of message are only providing information about the execution, R telling something is considered good to know. Not necessary are errors or warnings, sometimes just comunicate of procedures.\n\nData Types\nNow that you know how to store a value in an object and some of the messages you can get, you should know that R has different data types for this objects, some of them are character, numeric, arrays, data frames and lists as an example. Different types of data allows different ways to operate with it, for example characters must be specified between \" \", or ' ', otherwise R will understand them as variables names. For example if you want to write Hello World the next try will give you an error:\n\nHello World\n\nError: <text>:1:7: unexpected symbol\n1: Hello World\n          ^\n\n\nIn change, the next code understands that is a character:\n\n\"Hello World\"\n\n[1] \"Hello World\"\n\n\nA function that allows you to know which data type is an object is class, for example if you type class(\"Hello World\") it will return \"character\"\n\nclass(\"Hello World\")\n\n[1] \"character\"\n\n\nAs previous, if you don’t input the between \" \" it will return an error pointing that the object doesn’t exists\n\nclass(Hello World)\n\nError: <text>:1:13: unexpected symbol\n1: class(Hello World\n                ^\n\n\nNumeric data doesn’t need to be inputted between \" \" or ' ', in fact if is inputted between \" \" or ' ', R will understand it as a character instead a number. For example if you type just 2 the output will be a number, instead if you type \"2\" the output will be printed between \" \", pointing that element is a character\n\n2\n\n[1] 2\n\n\"2\"\n\n[1] \"2\"\n\n\nYou can check also with the class function\n\nclass(2)\n\n[1] \"numeric\"\n\nclass(\"2\")\n\n[1] \"character\"\n\n\nOther option of obecjts are vectors or arrays, this types allows to create objectis with multiple elements and an easy way to create them is with the function c, that stands for combine. For example if you want to produce an object with two elements if you just type them without the c function will be an error\n\n1 2 \n1,2\n\nError: <text>:1:3: unexpected numeric constant\n1: 1 2\n      ^\n\n\nInstead, if you use the c function it will create an object with multiple elements\n\nc(1,2)\n\n[1] 1 2\n\n\nA precaution is how you mix other data types in the objects that combine different elements because different data types will influence the way this combination works. For example vectors will coerce to the most restrictive data type, if you mix characters with numbers in a vector, R will coerce the vector type to a character\n\nclass(c(1,2))\n\n[1] \"numeric\"\n\nclass(c(1,\"2\"))\n\n[1] \"character\"\n\n\nYou can also create arrays with the matrix function, this allows you to get objects in two dimensiones, rows and columns\n\nmatrix(c(1,2,3,4), nrow = 2)\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\n\nAn inconvenient from arrays is that, as vectors do, coerce to the more restrictive data type\n\nmatrix(c(1,2,3,\"4\"), nrow = 2)\n\n     [,1] [,2]\n[1,] \"1\"  \"3\" \n[2,] \"2\"  \"4\" \n\n\nOne of the data types that works along with mutliple othe types are data frames, this allows to create a standard data base as you tipically know with multiple rows and columns, where an entire column will coerce to the most restrictive data type but you can have different data types in different columns. As an example we create a data frame named df that will use later in other examples\n\ndf <- data.frame(A = c(1, 2, 3), B = c(4, 5, 6), \n                 C = c(\"XXX\", \"YYY\", \"ZZZ\"))\ndf\n\n  A B   C\n1 1 4 XXX\n2 2 5 YYY\n3 3 6 ZZZ\n\n\nLater we will introduce a data type named tibble that is very similar to data frames, with a few differences, and is common to work with it in the tidyverse that will be explained later. The last data type of this section will be lists, this one allows to store any data type you imagine, you can combine in one object characters, numbers or data frame, within other objects, and is that the reason multiple functions that will explore later will return it results as a list or an object created from a list. An example of this lists are the next one, where we create an object named l that is a list we will use later in other examples.\n\nl <- list(Character = c(\"Hello\", \"World\"), Number = c(1, 2, 3, 4),\n          DataFrame = df)\n\n\n\nSubset Multidimensional Elements\nAs you see previously, there is elements as data frames or lists that stores multiple elements. Sometimes you will want to work with a subset of this multidimensional data types instead the entire object. In data frames, or lists, you can easily access to an entire column, or object, by using $ followed by the column, or object, name:\n\ndf$A\n\n[1] 1 2 3\n\nl$Character\n\n[1] \"Hello\" \"World\"\n\n\nBut sometimes you may want to access more, or less, than one entire column or object, so the more generally way to access to the elements are with the use of [ ]. One dimension objects like vectors or a column of a data frame, allows to access its elements by using the number of the element position between [ ]\n\ndf$A[1]\n\n[1] 1\n\n\nThis syntax allows also to access more than one object by combining it with a vector\n\ndf$A[c(1, 3)]\n\n[1] 1 3\n\n\nIn case of multidimensional elements as an entire data frame or arrays you should use [row,column] syntax, if you want an entire row just left in blank the row position\n\ndf[,1]\n\n[1] 1 2 3\n\n\nAnd the same for an entire row\n\ndf[1,]\n\n  A B   C\n1 1 4 XXX\n\n\nYou can also mix a single element and more than one row, or column\n\ndf[2,2]\n\n[1] 5\n\ndf[c(1,3), 2]\n\n[1] 4 6\n\n\nIn lists you must use a slight syntax, first you must access the object with double [ ] and then once you access the object it works like the object do. For example, now we show how to access the data frame that is the third object of the list, and then the element of the second row and second column\n\nl[[3]][2,2]\n\n[1] 5\n\n\nBetween [ ] you can also use the elements names when calling an object inside a list of a column in a data frame. The next code replicates the previous example\n\nl[[\"DataFrame\"]][2,\"B\"]\n\n[1] 5\n\n\n\n\nBasic Operations\nNow that you know how to store data, and the different objects where you can store the data, you must know the basic operations to do with that data. R has the next basic mathematical operations:\n\n\n\nSymbol\nOperation\n\n\n\n\n+\nAddition\n\n\n-\nSubtraction\n\n\n*\nMultiplication\n\n\n/\nDivision\n\n\n** or ^\nPower\n\n\n%%\nModulus\n\n\n%/%\nInteger Division\n\n\n\nA few examples\n\n10 + 3\n\n[1] 13\n\n10 - 3\n\n[1] 7\n\n10 * 3\n\n[1] 30\n\n10 / 3\n\n[1] 3.333333\n\n10 ^ 3\n\n[1] 1000\n\n10 ** 3\n\n[1] 1000\n\n10 %% 3\n\n[1] 1\n\n10 %/% 3\n\n[1] 3\n\n\nR also has logical operatos that returns a boolean value (TRUE or FALSE, also abbreviated as T or F) pointing if the statement is true or false. This operators are:\n\n\n\nSymbol\nComparison\n\n\n\n\n==\nEquals\n\n\n!=\nDifference\n\n\n>\nGreater\n\n\n>=\nGreater or Equal\n\n\n<\nLess than\n\n\n<=\nLess than or Equal\n\n\n%in%\nIf it is in\n\n\n|\nOr\n\n\n&\nAnd\n\n\n\nA few examples\n\n4 == 3\n\n[1] FALSE\n\n4 != 3\n\n[1] TRUE\n\n4 > 3\n\n[1] TRUE\n\n4 >= 3\n\n[1] TRUE\n\n4 < 3\n\n[1] FALSE\n\n4 <= 3\n\n[1] FALSE\n\n4 %in% c(1,2,3,4)\n\n[1] TRUE\n\nTRUE | FALSE\n\n[1] TRUE\n\nTRUE & FALSE\n\n[1] FALSE\n\n\nThis boolean values are interpreted by R as the numbers 0 for F and 1 for T, characteristic that allows to work with them numerically and is useful when you want to check a series of conditions.\nThe logical and mathematical operators are useful when making operations between different objects, it can be an object of a single valur or an object with multiple values. As many software R came with some basic functions that make specific tasks, for example if you want to add all the values in a vector you don´t need to type one-by-one all those values, you can use the function sum:\n\nsum(df$A)\n\n[1] 6\n\n\nIn order to use this functions the syntaxis in R is the function’s name followed by parenthesis ( ) and between the parenthesis the function’s arguments separated by comma ,. To know better how a function works is always a good idea to read the help document that comes along with R, some that you can make with ? symbol. For an example if you type ?sum you will see how sum function works and its arguments, where you can see an argument na.rm = FALSE, this points that the default value of the argument is FALSE and if you keep reading a little forward you can see that the documentation indicates for this argument: logical. Should missing values (including NaN) be removed? telling you the type of value that you can use and what is the functionality. Let x be a vector with a missing value NA\n\nx <- c(1, 2, NA)\n\nIf you use the sum function you will get an NA value\n\nsum(x)\n\n[1] NA\n\n\nBut if you use the na.rm argument you will get the sum of the valid values\n\nsum(x, na.rm = TRUE)\n\n[1] 3\n\n\nAs the sum function, R comes with a lot of functions in their base environment as functions to get descriptive statistics, work with dates and others. This functions are sufficient to take along any task manually but not necesarilly optimally. There are very useful functions and data types that doesn’t come with base enviroment and comes with packages.\n\n\n\nManaging packages\nWhat are packages? Packages is a group of functions and data types that works within them and other functions in R, this packages contains data types definitions, variables definitions and functions that realize some specific procedures. In order to install a package you have several alternatives depending on what is the package’s source, but no matter the option is the case, the procedure must be done only once in your R enviroment. Now is explained how to do it from CRAN by using the function install.packages() writing within \" \" the package name. As an example, in order to install dplyr -that is one of the most famous R’s packages for data manipulation- you must execute the following code:\n\ninstall.packages(\"dplyr\")\n\nNow that the package is installed you doesn’t need to install it again unless you want to update the package. That a package is installed doesn’t mean that R automatically loads the package along with their functions and data types, for example if you want to use the dplyr’s function mutate to create a new variable in your data frame it will be an error if you haven’t load the dplyr package:\n\nmutate(df, C = A + B)\n\nError in mutate(df, C = A + B): no se pudo encontrar la función \"mutate\"\n\n\nSo in order to use the package you must load it each time you open a new session with the function library() writing the package’s name within \" \" as follows\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nNow if you want to use the dplyr’s function mutate it will work\n\nmutate(df, C = A + B)\n\n  A B C\n1 1 4 5\n2 2 5 7\n3 3 6 9\n\n\nIs highly recommended that the load of the package be included in your script for reproducibility of your code.\nA situation that you may encounter in your R work is that sometimes you may want to use two packages that have different functions with the same name. As an example if you see the message that R print when you loaded dplyr package this says “The following objects are masked from ‘package:stats’:” and next it points the functions filter and lag, this message means that the package stats -one of the automatically installed and loaded by R- also has functions with the names filter and lag, but when you use them R will use the dplyr’s functions. For example the next code use dplyr’s lag\n\nlag(df$A)\n\n[1] NA  1  2\n\n\nBut in order to use the masked functions you can use the syntaxis package::function, following the previous example, to use stats’s lag\n\nstats::lag(df$A)\n\n[1] 1 2 3\nattr(,\"tsp\")\n[1] 0 2 1\n\n\n\n\nLoading and viewing data\nIn this section we review how to import classical data formats as csv, txt, excel and dta. The first doesn’t need specific packages to work well, but the latters do.\nFor csv and txt data R comes with the functions read.csv, read.csv2, read.delim and read.delim2. If you see the help documentation you will see that the four of them belongs to the family of the read.table function and has a very similar usage, being the basic usage:\n\nread.table(file = \"Path/To/Your/File.csv\")\n\nNote that the example is made with csv but is the same for txt. If you explore the help documentation you will notice that you can specify a variety of arguments that indicates if the first row should be taken as a header row, what is the separation between columns, the decimal separator and others.\nFor excel files you count with a variety of packages such as readxl, openxlsx and xlsx. Each package has their function and allows different tasks as read or write depending on the package. As this section is focused on import data, we present an example of the readxl package’s family of functions read_xls, read_xlsx and read_excel\n\nread_xlsx(path = \"Path/To/Your/File.xlsx\")\n\nIf you see the help documentation you will catch that there are a variety of arguments that allows point an specific sheet to impor, an specific range, use or not the first row as column names, between others.\nFinally in order to import dta files the package will be haven and the functions read_stata or read_dta, both with the basic usage as follows\n\nread_dta(file = \"Path/To/Your/File.dta\")\n\nUntil now all examples only import data but not store it in any object, an action that doesn’t make much sense because probably you import data to work with it. Now we are going to import an internal dataset from the package wooldridge, that contains 115 data sets from the book “Introductory Econometrics: A Modern Approach”, 7th Edition by Jeffrey Wooldridge, in order to show how manipulate this data sets\n\nmroz <- wooldridge::mroz\n\nThis dataset contains the data from T. A. Mroz (1987), “The Sensitivity of and Empirical Model of Married Women´s Hours of Work to Economic and Statistical Assumptions”, Econometrica 55, 765-799.\n\n\nTyding data\nIn this section we are covering how to manipulate data, specifically how to make a simple exploratory analysis and modify the data frame. Note that the dataset is imported as a data frame\n\nclass(mroz)\n\n[1] \"data.frame\"\n\n\nAlong with this section you will see the use of the head function, this function shows us the first rows of an object in order to prevent a data frame being totally printed. Previously we mentioned the existence of tibbles that are a widely used structure similar to data frames but with a few differences like don’t consider rownames or don’t interpret strings as factors by default. We introduce this because with the use of some functions from dplyr package a data frame becomes automatically a tibble. For example, consider de mroz data frame, if we apply the combination of group_by and summarise functions to get the mean of the number of kids with less than 6 years by labor situation of the women:\n\nungroup(summarise(group_by(mroz, inlf), meankidslt6 = mean(kidslt6)))\n\n# A tibble: 2 × 2\n   inlf meankidslt6\n  <int>       <dbl>\n1     0       0.366\n2     1       0.140\n\n\nAs you can see the result is a tibble. Now that you have an example of the use of dplyr you can see how easily is to get confused by using too many functions at once, a really nice operator that comes with dplyr is the pipe operator %>% that allows to apply functions without writing all together. As an example the next code replicates the previous example:\n\nmroz %>% group_by(inlf) %>% summarise(meankidslt6 = mean(kidslt6)) %>%\n  ungroup()\n\n# A tibble: 2 × 2\n   inlf meankidslt6\n  <int>       <dbl>\n1     0       0.366\n2     1       0.140\n\n\nNote that this works as: to the object at the left of the pipe operator, apply the function to the right. Another thing you can note is the use of the group_by, summarise and ungroup combo, where group_by as the name says allows to group by the variable(s) indicated, summarise calculate a descriptive statistic that can be mean, sd, min, max, median, quantile and others, in order to know them all you should consult the help documentation of summarise function.\nOther functionalities of dplyr package are the use of sql functions like sql_join that allows to merge two data frames or tibbles, apply functions to every column or specific ones, among others. Another famous package for data manipulation is tidyverse, a package that comes along with other package as dplyr, tibble, tidyr and others like ggplot2 for plots, lubridate for dates, stringr for strings. This fact became tidyverse as one of the must have package for data manipulation but with the caution that it takes up more memory.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ readr     2.1.4\n✔ ggplot2   3.4.1     ✔ stringr   1.5.0\n✔ lubridate 1.9.2     ✔ tibble    3.2.1\n✔ purrr     1.0.1     ✔ tidyr     1.3.0\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\n\nOnce loaded tidyverse package, you can use all the tools in the packages that are loaded with tidyverse. So let’s now try to make a join between two data frames (tibbles), first create the mean as previous examples and next join this mean to the mroz dataset by the column inlf\n\nmroz %>% group_by(inlf) %>% summarise(MeanKidslt6 = mean(kidslt6)) %>%\n  ungroup() %>% right_join(mroz, by = \"inlf\")\n\n# A tibble: 753 × 23\n    inlf MeanKidslt6 hours kidslt6 kidsge6   age  educ  wage repwage hushrs\n   <int>       <dbl> <int>   <int>   <int> <int> <int> <dbl>   <dbl>  <int>\n 1     0       0.366     0       0       1    49    12    NA       0   2550\n 2     0       0.366     0       2       0    30    16    NA       0   1928\n 3     0       0.366     0       1       0    30    12    NA       0   1100\n 4     0       0.366     0       0       4    41    12    NA       0   3193\n 5     0       0.366     0       0       1    45    12    NA       0   2250\n 6     0       0.366     0       0       5    43    12    NA       0   2012\n 7     0       0.366     0       0       1    42    13    NA       0   3856\n 8     0       0.366     0       0       0    60    12    NA       0   1645\n 9     0       0.366     0       0       0    57    12    NA       0   1554\n10     0       0.366     0       0       2    38    10    NA       0   2352\n# ℹ 743 more rows\n# ℹ 13 more variables: husage <int>, huseduc <int>, huswage <dbl>,\n#   faminc <dbl>, mtr <dbl>, motheduc <int>, fatheduc <int>, unem <dbl>,\n#   city <int>, exper <int>, nwifeinc <dbl>, lwage <dbl>, expersq <int>\n\n\nNote that the result of this procedure hasn’t been store in any object, so it can’t be accessed later. Other convenient tools that you will apply on this book are selecting some rows or some columns from the dataset, from filter function we can filter rows that meet certain condition and from the use of select we can filter specific columns:\n\nmroz %>% select(kidslt6, hours) %>% filter(kidslt6 > 2)\n\n  kidslt6 hours\n1       3     0\n2       3     0\n3       3     0\n\n\nIn previous section has been shown the use of mutate function to create new variables, in tibbles as in data frames the use of $ operator also creates new variables:\n\nmroz$exper2 <- mroz$exper^2\nhead(mroz)\n\n  inlf hours kidslt6 kidsge6 age educ   wage repwage hushrs husage huseduc\n1    1  1610       1       0  32   12 3.3540    2.65   2708     34      12\n2    1  1656       0       2  30   12 1.3889    2.65   2310     30       9\n3    1  1980       1       3  35   12 4.5455    4.04   3072     40      12\n4    1   456       0       3  34   12 1.0965    3.25   1920     53      10\n5    1  1568       1       2  31   14 4.5918    3.60   2000     32      12\n6    1  2032       0       0  54   12 4.7421    4.70   1040     57      11\n  huswage faminc    mtr motheduc fatheduc unem city exper  nwifeinc      lwage\n1  4.0288  16310 0.7215       12        7  5.0    0    14 10.910060 1.21015370\n2  8.4416  21800 0.6615        7        7 11.0    1     5 19.499981 0.32851210\n3  3.5807  21040 0.6915       12        7  5.0    0    15 12.039910 1.51413774\n4  3.5417   7300 0.7815        7        7  5.0    0     6  6.799996 0.09212332\n5 10.0000  27300 0.6215       12       14  9.5    1     7 20.100058 1.52427220\n6  6.7106  19495 0.6915       14        7  7.5    1    33  9.859054 1.55648005\n  expersq exper2\n1     196    196\n2      25     25\n3     225    225\n4      36     36\n5      49     49\n6    1089   1089\n\n\nAnother function to create variables is transmute, but this function doesn’t mantain old variables, in fact it replace all the data for the new one\n\nhead(mroz %>% transmute(expersquared = exper^2))\n\n  expersquared\n1          196\n2           25\n3          225\n4           36\n5           49\n6         1089\n\n\n\n\n\nSo it must be used with caution. Finally the last tool that we introduce for data manipulation is transform data from wide format to long format and reverse. Consider the next data frame\n\nData <- data.frame(Zone = c(\"A\", \"A\", \"B\", \"B\"), \n                   Year = c(2021, 2022, 2021, 2022),\n                   Sales = c(100, 115, 98, 106))\nData\n\n  Zone Year Sales\n1    A 2021   100\n2    A 2022   115\n3    B 2021    98\n4    B 2022   106\n\n\nThis format is the long format, you have multiple observations for one unit (zone in this example), to transform it in wide format\n\nData = pivot_wider(data = Data, id_cols = Zone, names_from = Year,\n                   values_from = Sales)\nData\n\n# A tibble: 2 × 3\n  Zone  `2021` `2022`\n  <chr>  <dbl>  <dbl>\n1 A        100    115\n2 B         98    106\n\n\nAs you can see now there is one observation per unit. Lets get it back to long format\n\nData = pivot_longer(data = Data, names_to = \"Year\", values_to = \"Sales\",\n                    cols = -Zone)\nData\n\n# A tibble: 4 × 3\n  Zone  Year  Sales\n  <chr> <chr> <dbl>\n1 A     2021    100\n2 A     2022    115\n3 B     2021     98\n4 B     2022    106\n\n\nNow that you know the basics of data manipulation, the next step is to learn how make some basic plots.\n\n\n\n\n\nBasic Plots\nThe basic function to make a plot in R is the plot function, this function maps pairs of points in the \\((x,y)\\) coordinate axis. Let \\(x\\) be a sequence of integers between -5 and 5\n\nx <- -5:5\n\nNow consider \\(y = x^2\\)\n\ny = x^2\n\nplot function by default maps a point plot\n\nplot(x,y)\n\n\n\n\nIf you access help documentation for plot you can see how add elements to the graph\n\nplot(x,y, type = \"l\", main = \"Plot Example\", xlab = \"Variable X\",\n     ylab = \"Variable Y\")\n\n\n\n\nA widely used package for make more custom graphs is ggplot2, as tidyverse has been loaded previous, in this case we don’t need to load ggplot2, but if you haven’t load it remember that with the next code you can do it\n\nlibrary(ggplot2)\n\nThe first step in ggplot is to define the plot\n\nggplot()\n\n\n\n\nThis define a blank canvas where you can add elements, as an example a line object (geom) is added\n\nggplot() + geom_line()\n\n\n\n\nUntil now we haven’t added data so ggplot2 is not mapping any pair of points, now specify the data, this must be done inside the aes function\n\nggplot() + geom_line(aes(x = x, y = y))\n\n\n\n\nNote that in order to add elements to the graph we have been using + unlike when using multiple variables where were used the pipe operator %>%. With this syntax you can add more elements to the graph\n\nggplot() + geom_line(aes(x , y)) + geom_point(aes(x, y))\n\n\n\n\nWhen you use a data frame you can also define aes inside ggplot function\n\nggplot(mroz, aes(x = exper, y = lwage)) + geom_point()\n\n\n\n\nHere you can manipulate different overall themes for your plot and elements characteristics such as color or size\n\nggplot(mroz, aes(x = exper, y = lwage)) + geom_point(color = \"red\") +\n  theme_minimal()\n\n\n\n\nIn this way you can add a variety of elements such as an OLS regression line\n\nggplot(mroz, aes(x = exper, y = lwage)) + geom_point(color = \"red\") +\n  theme_minimal() + geom_smooth(method = \"lm\", color = \"blue\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nAs said before, this introductory section of this chapter doesn’t intend to be a comprehensive tutorial of R, instead is a wide general guide to understand some fundamentals you will see in the rest of the chapter."
  },
  {
    "objectID": "01_02_Chapter2R.html",
    "href": "01_02_Chapter2R.html",
    "title": "Details required for Chapter 2",
    "section": "",
    "text": "Here will be the Chapter 2 excersises and examples."
  },
  {
    "objectID": "01_03_Chapter3R.html",
    "href": "01_03_Chapter3R.html",
    "title": "Details required for Chapter 3",
    "section": "",
    "text": "Here will be the Chapter 3 excersises and examples."
  },
  {
    "objectID": "02_00_FollowingStata.html",
    "href": "02_00_FollowingStata.html",
    "title": "Following Along with Stata",
    "section": "",
    "text": "Some info about Stata and this Chapter."
  },
  {
    "objectID": "02_01_IntroductionStata.html",
    "href": "02_01_IntroductionStata.html",
    "title": "Introduction to Stata",
    "section": "",
    "text": "Here will be the introduction to Stata. Now an example of code visualization:\n\nlibrary(Statamarkdown)\n\nWarning: package 'Statamarkdown' was built under R version 4.2.3\n\n\nStata found at C:/Program Files/Stata16/StataMP-64.exe\n\n\nThe 'stata' engine is ready to use.\n\n\n\nclear all\nset obs 10000\ngen x = -3 + 6/(_N-1)*(_n - 1)\ngen y = normalden(x)\nline y x\n\nnumber of observations (_N) was 0, now 10,000\n\n\n\n\n\nNormal Density"
  },
  {
    "objectID": "02_02_Chapter2Stata.html",
    "href": "02_02_Chapter2Stata.html",
    "title": "Details required for Chapter 2",
    "section": "",
    "text": "Here will be the Chapter 2 excersises and examples."
  },
  {
    "objectID": "02_03_Chapter3Stata.html",
    "href": "02_03_Chapter3Stata.html",
    "title": "Details required for Chapter 3",
    "section": "",
    "text": "Here will be the Chapter 3 excersises and examples."
  }
]